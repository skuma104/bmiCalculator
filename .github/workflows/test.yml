name: BMI Calculator Tests

on:
  push:
    branches: [ main, dev-branch ]
  pull_request:
    branches: [ main, dev-branch ]
  workflow_dispatch:

permissions:
  contents: write
  issues: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and run tests in Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: bmi-calculator-tests:latest
        
    - name: Run tests
      run: |
        docker run --name bmi-tests bmi-calculator-tests:latest
        #/app/tests/BMICTests_datadriven.robot
        
    - name: Copy test results from container
      if: always()
      run: |
        docker cp bmi-tests:/app/test-results/robotDatadriven ./tests/test-results/robotDatadriven/
        docker cp bmi-tests:/app/test-results/robotGherkin ./tests/test-results/robotGherkin/
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Robot Framework
      run: |
        pip install robotframework
        
    - name: Convert to JUnit format
      if: always()
      run: |
        python -m robot.rebot --xunit ./tests/test-results/robotDatadriven/junit.xml ./tests/test-results/robotDatadriven/output.xml
        python -m robot.rebot --xunit ./tests/test-results/robotGherkin/junit.xml ./tests/test-results/robotGherkin/output.xml
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ./tests/test-results
        
    - name: Publish JUnit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          ./tests/test-results/robotDatadriven/junit.xml
          ./tests/test-results/robotGherkin/junit.xml
        check_name: "Robot Framework Test Results"

    - name: Install Sphinx and dependencies
      run: |
        python -m pip install --upgrade pip


        # Check if requirements.txt exists in documentation/source folder
        if [ -f documentation/source/requirements.txt ]; then
          echo "Installing dependencies from documentation/source/requirements.txt"
          pip install -r documentation/source/requirements.txt
        else
          echo "No requirements.txt found, installing minimal dependencies"
          pip install robotframework sphinx sphinx-rtd-theme sphinx-needs
        fi
    
    - name: Build Sphinx documentation
      run: |
        cd documentation
          
        # Ensure static directories exist
        mkdir -p source/_static/test_results/robotDatadriven
        mkdir -p source/_static/test_results/robotGherkin
          
        # Copy test results
        cp -r ../tests/test-results/robotDatadriven/* source/_static/test_results/robotDatadriven || true
        cp -r ../tests/test-results/robotGherkin/* source/_static/test_results//robotGherkin || true
        
        # Build documentation with verbose output
        sphinx-build -E -a -v -b html source build/html
        
        # Check if test_results.html was generated
        if [ -f build/html/test_results.html ]; then
          echo "test_results.html was successfully generated"
        else
          echo "WARNING: test_results.html was not generated!"
        fi
      
    - name: Commit and push documentation changes
      if: github.event_name != 'pull_request'
      run: |
          git config --local user.name 'github-actions[bot]'
          git config --local user.email 'github-actions[bot]@users.noreply.github.com'
          git config --get user.name
          git config --get user.email
          git add documentation/ tests/test-results
          git commit -m "Update documentation with latest test results [skip ci]" || echo "No changes to commit"
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin dev-branch
  

    - name: Upload documentation as artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: documentation/build/html/
    
    - name: Trigger ReadTheDocs build
      if: github.event_name != 'pull_request'
      run: |
        # Install curl if not available
        sudo apt-get update && sudo apt-get install -y curl
        
        # Trigger ReadTheDocs build using webhook
        if [ -n "${{secrets.READTHEDOCS_WEBHOOK_URL}}" ]; then
          curl -X POST ${{secrets.READTHEDOCS_WEBHOOK_URL }}
          echo "ReadTheDocs build triggered"
        else
          echo "No ReadTheDocs webhook URL provided. Skipping trigger."
          echo "Please set up a webhook in ReadTheDocs and add it as a secret named READTHEDOCS_WEBHOOK_URL"
        fi
